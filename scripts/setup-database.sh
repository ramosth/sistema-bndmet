#!/bin/bash

# üöÄ Script de Setup Autom√°tico do Banco de Dados BNDMET
# Este script configura e testa o banco de dados automaticamente

set -e  # Parar se houver erro

echo "üéØ SISTEMA TCC_MONITORA_BARRAGEM_ARDUINO_BNDMET - Setup do Banco de Dados"
echo "=============================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# 1. Verificar estrutura de pastas
log_info "Verificando estrutura de pastas..."
if [ ! -f "docker-compose.yml" ]; then
    log_error "docker-compose.yml n√£o encontrado! Execute este script na pasta raiz do projeto."
    exit 1
fi

if [ ! -d "database/init" ]; then
    log_warning "Pasta database/init n√£o encontrada. Criando..."
    mkdir -p database/init
fi

if [ ! -f "database/init/02-auth-tables.sql" ]; then
    log_error "Arquivo database/init/02-auth-tables.sql n√£o encontrado!"
    log_info "Certifique-se de criar o arquivo com o script SQL de autentica√ß√£o."
    exit 1
fi

log_success "Estrutura de pastas verificada!"

# 2. Parar containers existentes
log_info "Parando containers existentes..."
docker-compose down -v --remove-orphans

# 3. Limpar dados √≥rf√£os
log_info "Limpando dados √≥rf√£os do Docker..."
docker system prune -f

# 4. Subir apenas o PostgreSQL primeiro
log_info "Subindo PostgreSQL..."
docker-compose up -d postgres

# 5. Aguardar banco ficar pronto
log_info "Aguardando PostgreSQL ficar pronto..."
max_attempts=30
attempt=1

while [ $attempt -le $max_attempts ]; do
    if docker exec bndmet-postgres pg_isready -U admin -d bndmet >/dev/null 2>&1; then
        log_success "PostgreSQL est√° pronto!"
        break
    fi
    
    if [ $attempt -eq $max_attempts ]; then
        log_error "PostgreSQL n√£o ficou pronto ap√≥s $max_attempts tentativas"
        exit 1
    fi
    
    echo -n "."
    sleep 2
    ((attempt++))
done

# 6. Aguardar um pouco mais para garantir que os scripts foram executados
log_info "Aguardando execu√ß√£o dos scripts de inicializa√ß√£o..."
sleep 5

# 7. Verificar se as tabelas foram criadas
log_info "Verificando tabelas criadas..."
tables=$(docker exec bndmet-postgres psql -U admin -d bndmet -t -c "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name LIKE 'usuarios_%' OR table_name LIKE 'sessoes_%' OR table_name LIKE 'logs_%';" | xargs)

if echo "$tables" | grep -q "usuarios_admin"; then
    log_success "Tabela usuarios_admin criada!"
else
    log_error "Tabela usuarios_admin n√£o foi criada!"
fi

if echo "$tables" | grep -q "usuarios_basicos"; then
    log_success "Tabela usuarios_basicos criada!"
else
    log_error "Tabela usuarios_basicos n√£o foi criada!"
fi

# 8. Verificar usu√°rio padr√£o
log_info "Verificando usu√°rio administrador padr√£o..."
admin_count=$(docker exec bndmet-postgres psql -U admin -d bndmet -t -c "SELECT COUNT(*) FROM usuarios_admin WHERE email = 'admin@bndmet.com';" | xargs)

if [ "$admin_count" = "1" ]; then
    log_success "Usu√°rio administrador padr√£o criado!"
    log_info "üìß Email: admin@bndmet.com"
    log_info "üîë Senha: admin123"
else
    log_error "Usu√°rio administrador padr√£o n√£o foi criado!"
fi

# 9. Verificar usu√°rios b√°sicos de exemplo
log_info "Verificando usu√°rios b√°sicos de exemplo..."
basic_count=$(docker exec bndmet-postgres psql -U admin -d bndmet -t -c "SELECT COUNT(*) FROM usuarios_basicos;" | xargs)
log_success "$basic_count usu√°rios b√°sicos de exemplo criados!"

# 10. Mostrar estat√≠sticas
log_info "Estat√≠sticas do banco:"
docker exec bndmet-postgres psql -U admin -d bndmet -c "SELECT * FROM view_estatisticas_usuarios;"

# 11. Subir todos os servi√ßos
log_info "Subindo todos os servi√ßos..."
docker-compose up -d

# 12. Verificar status final
log_info "Status dos containers:"
docker-compose ps

echo ""
echo "üéâ SETUP CONCLU√çDO COM SUCESSO!"
echo "================================"
log_success "Banco de dados PostgreSQL: ‚úÖ Funcionando"
log_success "Tabelas de autentica√ß√£o: ‚úÖ Criadas"
log_success "Usu√°rio administrador: ‚úÖ Criado"
log_success "Usu√°rios b√°sicos de exemplo: ‚úÖ Criados"

echo ""
log_info "üåê Servi√ßos dispon√≠veis:"
echo "   üìä Adminer (DB Manager): http://localhost:8080"
echo "   üóÑÔ∏è  PostgreSQL: localhost:5432"

echo ""
log_info "üîë Credenciais de acesso:"
echo "   üìß Email: admin@bndmet.com"
echo "   üîë Senha: admin123"

echo ""
log_info "üìã Pr√≥ximos passos:"
echo "   1. Configure o backend com as rotas de autentica√ß√£o"
echo "   2. Configure o frontend com as p√°ginas de login"
echo "   3. Teste o sistema completo"

echo ""
log_warning "‚ö†Ô∏è  IMPORTANTE: Em produ√ß√£o, altere as senhas padr√£o!"